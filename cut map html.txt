            if (checked) {
                equivalentregions = [
                    ["UG", "DS"], ["DS", "UG"],
                    ["CL", "SH"], ["SH", "CL"],
                    ["SS", "RM"], ["RM", "SS"],
                    ["DM", "MS"], ["MS", "DM"],
                    ["SL", "LM"], ["LM", "SL"]];
                pregions = slugcats[difficulty].regions;

                for (const acronym in pregions) {
                    if (pregion == acronym) {
                        if (difficulty != n) {
                            difficulty = n;
                            region = pregion;
                            room = slugcats[difficulty].startingRoom;
                            pushState();
                        }
                    } else {
                        for (pairs in equivalentregions) {
                            if (pairs[0] == loadedRegion) {
                                if (difficulty != n) {
                                    difficulty = n;
                                    region = pairs[1];
                                    room = slugcats[difficulty].startingRoom;
                                    pushState();
                                }
                            } else {
                                if (difficulty != n) {
                                    difficulty = n;
                                    region = slugcats[difficulty].startingRegion;
                                    room = slugcats[difficulty].startingRoom;
                                    pushState();
                                }
                            }
                        }
                    }
                }
            } else {